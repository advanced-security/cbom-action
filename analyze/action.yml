name: CBOM Analyze Action
description: Run CodeQL queries and create a Crypto Bill of Materials
inputs:
  repositoryNameWithOwner:
    description: The repository to analyze
    required: false
    default: ${{ github.repository }}
  language:
    description: The language to analyze
    required: true
  createCodeQLDatabaseIfRequired:
    description: Whether to create a CodeQL database if 'repositoryNameWithOwner:' does not have a CodeQL database stored
    required: false
    default: "true"
  queryTimeout:
    description: The maximum time to run a query
    required: false
    default: "300"
  requestGitHubAnalysis:
    description: |
      Whether to request an analysis by GitHub if 'repositoryNameWithOwner:' does not have a CodeQL database stored or
      the workflow run is unable to create a database
    required: false
    default: "false"
  uploadToCodeScanning:
    description: Whether to upload the results to GitHub Code Scanning
    required: false
    default: "false"
runs:
  using: composite
  steps:
    - name: Set up env
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Set up environment variables
        IFS=/ read -r REPO_OWNER REPO_NAME <<< ${{ inputs.repositoryNameWithOwner }}
        echo "REPO_OWNER=${REPO_OWNER}" >> "$GITHUB_ENV"
        echo "REPO_NAME=${REPO_NAME}" >> "$GITHUB_ENV"
        echo "GH_TOKEN=${{ github.token }}" >> "$GITHUB_ENV"
        echo "GITHUB_TOKEN=${{ github.token }}" >> "$GITHUB_ENV"
        echo "CODEQL_EXTRACTOR_JAVA_OPTION_BUILDLESS=true" >> "$GITHUB_ENV"
        echo "CODEQL_EXTRACTOR_JAVA_OPTION_BUILDLESS_CLASSPATH_FROM_BUILD_FILES=true" >> "$GITHUB_ENV"
        echo "CODEQL_DB_NAME=codeql-db" >> "$GITHUB_ENV"
        echo "CODEQL_RAM=$(awk '/MemTotal/ { printf "%.0f", $2/1024*0.8 }' /proc/meminfo)" >> "$GITHUB_ENV"
        echo "SARIF_DIR_PATH=${{ github.workspace }}/cbom-results/${{ inputs.repositoryNameWithOwner }}" >> "$GITHUB_ENV"
        DEFAULT_BRANCH=$(gh api repos/${{ inputs.repositoryNameWithOwner }} --jq ".default_branch")
        echo "DEFAULT_BRANCH=${DEFAULT_BRANCH}" >> "$GITHUB_ENV"
        echo "GIT_SHA=$(gh api repos/${{ inputs.repositoryNameWithOwner }}/branches/${DEFAULT_BRANCH} \
          --jq='.commit.sha')" >> "$GITHUB_ENV"
        echo "CBOM_DATA_REPO=advanced-security/crypto-bill-of-materials-data" >> "$GITHUB_ENV"
    - name: Check for existing analysis results
      id: check-for-results
      shell: bash
      run: |
        # Check for existing analysis results
        echo "::group::Check for existing analysis results"
        curl -O -s -f -X GET \
          "https://raw.githubusercontent.com/${CBOM_DATA_REPO}/main/data/${{ inputs.repositoryNameWithOwner }}/${GIT_SHA}/${{ inputs.language }}.sarif" || true
        if [[ -f "${{ inputs.language }}.sarif" ]]; then
          mkdir -p ${SARIF_DIR_PATH}/${GIT_SHA}
          mv ${{ inputs.language }}.sarif ${SARIF_DIR_PATH}/${GIT_SHA}/${{ inputs.language }}.sarif
          echo "SARIF results file downloaded to ${SARIF_DIR_PATH}/${GIT_SHA}/${{ inputs.language }}.sarif"
          echo "SARIF_RESULTS_DOWNLOADED=true" >> "$GITHUB_ENV" 
        else
          echo "No SARIF results file found"
          echo "SARIF_RESULTS_DOWNLOADED=false" >> "$GITHUB_ENV" 
        fi
        echo "::endgroup::"
    - name: Find or install CodeQL
      if: env.SARIF_RESULTS_DOWNLOADED == 'false' 
      shell: bash
      run: |
        # Find or install CodeQL
        echo "::group::Find or install CodeQL"
        VERSION="$(find "${{ runner.tool_cache }}/CodeQL" -maxdepth 1 -mindepth 1 -type d -print \
          | sort \
          | tail -n 1 \
          | tr -d '\n')"
        if [[ -n "${VERSION}" ]]; then
          echo "${VERSION}/x64/codeql" >> $GITHUB_PATH
          echo "Using CodeQL at ${VERSION}"
        else
          gh extensions install github/gh-codeql
          gh codeql download
          gh codeql install-stub
        fi
        echo "::endgroup::"
    - name: Download CodeQL DB
      id: download-codeql-db
      if: env.SARIF_RESULTS_DOWNLOADED == 'false'
      shell: bash
      continue-on-error: true
      run: |
        # Download CodeQL database
        echo "::group::Download CodeQL database"
        CODEQL_DB_ZIP=codeql-db.zip
        ! curl -f -s -L -o ${CODEQL_DB_ZIP} \
          -H "Accept: application/zip" \
          -H "Authorization: Bearer ${{ github.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ inputs.repositoryNameWithOwner }}/code-scanning/codeql/databases/${{ inputs.language }}"
        if [[ -f ${CODEQL_DB_ZIP} ]]; then
          codeql database unbundle "${CODEQL_DB_ZIP}" --target="${{ github.workspace }}" --name=${CODEQL_DB_NAME}
          codeql database upgrade "${{ github.workspace }}/${CODEQL_DB_NAME}" || true
          echo "CODEQL_DB_DOWNLOADED=true" >> "$GITHUB_ENV"   
        else
          echo "No CodeQL database found"
          echo "CODEQL_DB_DOWNLOADED=false" >> "$GITHUB_ENV"     
        fi
        echo "::endgroup::"
    - name: Checkout analysis repository
      if: |
        env.SARIF_RESULTS_DOWNLOADED == 'false' && 
        env.CODEQL_DB_DOWNLOADED == 'false' &&
        inputs.createCodeQLDatabaseIfRequired == 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repositoryNameWithOwner }}
        path: ${{ inputs.repositoryNameWithOwner }}
    - name: Create CodeQL DB
      id: create-codeql-db
      continue-on-error: true
      if: |
        env.SARIF_RESULTS_DOWNLOADED == 'false' && 
        env.CODEQL_DB_DOWNLOADED == 'false' &&
        inputs.createCodeQLDatabaseIfRequired == 'true'
      shell: bash
      run: |
        # Create CodeQL database
        echo "::group::Create CodeQL database"
        codeql database create --ram=${CODEQL_RAM} --language=${{ inputs.language }} "${{ github.workspace }}/${CODEQL_DB_NAME}"
        echo "::endgroup::"
    - name: Analyze CodeQL DB
      id: analyze-codeql-db
      if: |
        env.SARIF_RESULTS_DOWNLOADED == 'false' && 
        (steps.create-codeql-db.outcome == 'success' || env.CODEQL_DB_DOWNLOADED == 'true')
      shell: bash
      continue-on-error: true
      run: |
        # Analyze CodeQL database
        echo "::group::Analyze CodeQL database"
        mkdir -p ${SARIF_DIR_PATH}/${GIT_SHA}
        codeql database analyze ${{ github.workspace }}/${CODEQL_DB_NAME} \
          codeql/${{ inputs.language }}-queries:experimental/cryptography/inventory/new_models \
          --ram=${CODEQL_RAM} \
          --output=${SARIF_DIR_PATH}/${GIT_SHA}/${{ inputs.language }}.sarif \
          --format=sarifv2.1.0 --sarif-category="CBOM:${{ inputs.repositoryNameWithOwner }}/${{ inputs.language }}" \
          --sarif-add-query-help --sarif-add-snippets \
          --timeout=${{ inputs.queryTimeout }}
        echo "::endgroup::"
    - name: Request GitHub CodeQL analysis
      if: |
        inputs.requestGitHubAnalysis == 'true' &&
        env.SARIF_RESULTS_DOWNLOADED == 'false' && 
        env.CODEQL_DB_DOWNLOADED == 'false' && 
        steps.analyze-codeql-db.outcome != 'success'
      shell: bash
      run: |
        # Request GitHub CodeQL analysis
        echo "::group::Request GitHub CodeQL analysis"
        SEARCH_RESULTS=$(gh issue list --repo ${CBOM_DATA_REPO} \
          --search "${{ inputs.repositoryNameWithOwner }}/${{ inputs.language }}" \
          --state open --json id,number,title)
        RESULT_COUNT=$(jq length <<< "${SEARCH_RESULTS}")
        if [[ ${RESULT_COUNT} -eq 0 ]]; then
          gh issue create \
            --repo ${CBOM_DATA_REPO} \
            --title ${{ inputs.repositoryNameWithOwner }}/${{ inputs.language }} \
            --label analysis-requested \
            --body "${GIT_SHA}"
        else
          ISSUE_NUMBER=$(jq -r ".[0].number" <<< "${SEARCH_RESULTS}")
          gh issue comment \
            --repo ${CBOM_DATA_REPO} \
            ${ISSUE_NUMBER} \
            --body "${GIT_SHA}"
          if [[ ${RESULT_COUNT} -gt 1 ]]; then
            echo "Found multiple issues matching the search criteria, comment added to issue #${ISSUE_NUMBER}"
          fi
        fi
        echo "::endgroup::"
    - name: Archive results
      if: env.SARIF_RESULTS_DOWNLOADED == 'true' || steps.analyze-codeql-db.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: cbom-results
        path: ${{ github.workspace }}/cbom-results
    - name: Upload results to Code Scanning
      if: |
        inputs.uploadToCodeScanning == 'true' &&
        (env.SARIF_RESULTS_DOWNLOADED == 'true' || steps.analyze-codeql-db.outcome == 'success')
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ env.SARIF_DIR_PATH }}/${{ env.GIT_SHA }}/${{ inputs.language }}.sarif

